<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gzzz.mapper.EmployeeMapper">
    <!--
        #{key}：占位符 + 赋值   emp_id = ?  ?=赋值
                优点：可以防止注入攻击
                缺点：赋值只能替代值的位置,不能替代容器名(标签，列名，sql关键字)
        ${key}：字符串拼接      "emp_id" + id
        总结：
            动态值传递用#{key}，动态的标签，列名，sql关键字用${key}
    -->
    <select id="queryById" resultType="com.gzzz.pojo.Employee">
        select emp_id empId, emp_name empName, emp_salary empSalary
        from t_emp
        where emp_id = #{emp_id}
    </select>
    <!--  场景一：传入单个简单类型(及其包装类)  #{key}随便写，一般情况下key推荐使用方法的参数名  -->
    <delete id="deleteById">
        delete
        from t_emp
        where emp_id = #{emp_id}
    </delete>
    <select id="queryBySalary" resultType="com.gzzz.pojo.Employee">
        SELECT emp_id empId, emp_name empName, emp_salary empSalary
        from t_emp
        where emp_salary = #{salary}
    </select>

    <!--  场景2：传入一个实体对象 key = 类的属性名 即可 -->
    <insert id="insertEmp">
        insert into t_emp (emp_name, emp_salary)
        values (#{empName}, #{empSalary})
    </insert>

    <!--
        场景3：传入多个简单类型数据key如何取值
              方案一：通过@Param注解 指定多个简单参数的key  key = @Param的value属性值
              方案二：mybatis默认机制 形参从左到右依次对应arg0 arg1...  或者param1 param2...
                    (name,salary) name->key=arg0 salary->key=arg1
                    或(name,salary) name->key=param1 salary->key=param2
    -->
    <select id="queryByNameAndSalary" resultType="com.gzzz.pojo.Employee">
        select emp_id empId, emp_name empName, emp_salary empSalary
        from t_emp where emp_name = #{a} and emp_salary = #{b}
--         from t_emp where emp_name = #{arg0} and emp_salary = #{arg1}
--         from t_emp where emp_name = #{param1} and emp_salary = #{param2}
    </select>
</mapper>